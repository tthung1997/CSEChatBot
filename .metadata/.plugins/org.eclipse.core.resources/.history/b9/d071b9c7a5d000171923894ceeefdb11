import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * This class implements the Report Screen frame with all components.
 * @author Group 11 CSCE 361
 * @date Fall 2017
 */
public class ReportScreen extends JFrame implements ActionListener {
	
	//Action commands
	private static final String SEND 	= "send";
	private static final String RETURN 	= "return";
	private static final String DELETE	= "delete";
	
	//Instances of other screens
	private LoginScreen 		loginScr;
	private JFrame 				previousScr;
	
	//Java GUI components
	private JTextArea 			reportBox;
	private JLabel 				message;
	private JPanel 				panel;
	private JTabbedPane			tabbedPane;
	private JPanel				reportPanel;
	private JPanel				managePanel;
	private JTable				table;
	
	private ArrayList<Report>	reports;
	
	/**
	 * This constructor creates Report Screen Frame
	 * @throws IOException 
	 */
	public ReportScreen() throws IOException {
		
		//Set frame
		setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
		setTitle("CSE CHATBOT - REPORT");
		setResizable(false);
		Container contentPane = getContentPane();
		
		//Create panel
		panel = new JPanel();
		panel.setLayout(new BorderLayout());
		panel.setPreferredSize (new Dimension(600, 400));
		panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

		//CSE image
		BufferedImage csePicture = ImageIO.read(getClass().getResource("CSE_logo.png"));
		JLabel picLabel = new JLabel(new ImageIcon(csePicture));
		picLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
		panel.add(picLabel, BorderLayout.WEST);
		
		//Tabbed pane
		tabbedPane = new JTabbedPane();
		tabbedPane.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 0));
		
		//Report panel
		reportPanel = new JPanel();
		reportPanel.setLayout(new BorderLayout(10, 10));
		reportPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        //Return button
        JButton returnButton = new JButton("RETURN");
        returnButton.setPreferredSize(new Dimension(90, 40));
        returnButton.setActionCommand(RETURN);
        returnButton.addActionListener(this);
        
        //Report button
		JButton reportButton = new JButton("SEND");
		reportButton.setPreferredSize(new Dimension(90, 40));
		reportButton.setActionCommand(SEND);
		reportButton.addActionListener(this);
        
		//Report box label
		JLabel reportLabel = new JLabel("REPORT:");
		reportLabel.setLabelFor(reportBox);
		reportPanel.add(reportLabel, BorderLayout.NORTH);
		
        //Report box
        reportBox = new JTextArea();
        reportBox.setEditable(true);
        reportBox.setWrapStyleWord(true);
        reportBox.setFont(new Font("Courier", Font.PLAIN, 14));
        reportBox.setLineWrap(true);
        reportBox.setMargin(new Insets(10, 10, 10, 10));
        reportPanel.add(new JScrollPane(reportBox), BorderLayout.CENTER);
        
        //Message Label
        message = new JLabel(" ");
        message.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        //Action panel
        JPanel actionPanel = new JPanel();
        actionPanel.setLayout(new BoxLayout(actionPanel, BoxLayout.Y_AXIS));
        actionPanel.add(message);
        
        //button panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 50, 5));
        buttonPanel.add(reportButton);
        buttonPanel.add(returnButton);
        buttonPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        actionPanel.add(buttonPanel);
        
        reportPanel.add(actionPanel, BorderLayout.SOUTH);
        tabbedPane.addTab("Report", reportPanel);
        
        //Report Managing panel
  		managePanel = new JPanel();
  		managePanel.setLayout(new BorderLayout(10, 10));
  		managePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
  		managePanel.setLayout(new BorderLayout());
  		tabbedPane.addTab("Manage", managePanel);
  		
  		//Display table
		table = new JTable() { 
			public boolean isCellEditable(int row, int column) {                
                return false;               
			}
  			public String getToolTipText(MouseEvent e)
	  	    {
	  	        int row = rowAtPoint(e.getPoint());
	  	        int column = columnAtPoint(e.getPoint());
	  	        System.out.println(row + " " + column + " " + getRowCount() + " " + getColumnCount());
	  	        if (row >= getRowCount() || column >= getColumnCount()) {
	  	        	return null;
	  	        }
	  	        Object value = getValueAt(row, column);
	  	        return value == null ? null : value.toString();
	  	    }
  		};
  		table.setModel(new DefaultTableModel(
  				new Object[][] {
  				},
  				new String[] {
  					"Username", "Report"
  				}
  			));
  		table.getColumnModel().getColumn(0).setMaxWidth(200);
  		table.getColumnModel().getColumn(0).setPreferredWidth(100);
  		table.getTableHeader().setReorderingAllowed(false);
  		displayReports();
  		
  		//JScrollPane
  		JScrollPane scrollPane = new JScrollPane(table);
  		table.setFillsViewportHeight(true);
  		managePanel.add(scrollPane, BorderLayout.CENTER);
  		
  		//Delete button
  		JButton deleteButton = new JButton("DELETE");
        deleteButton.setPreferredSize(new Dimension(90, 40));
        deleteButton.setActionCommand(DELETE);
        deleteButton.addActionListener(this);
        
        //Return button for manage
        JButton returnMButton = new JButton("RETURN");
        returnMButton.setPreferredSize(new Dimension(90, 40));
        returnMButton.setActionCommand(RETURN);
        returnMButton.addActionListener(this);
  		
  		//button panel for managing
        JPanel buttonMPanel = new JPanel();
        buttonMPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 50, 10));
        buttonMPanel.add(deleteButton);
        buttonMPanel.add(returnMButton);
        buttonMPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        managePanel.add(buttonMPanel, BorderLayout.SOUTH);
  		
		contentPane.add(panel);
		pack();
		setLocationRelativeTo(null);
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		String cmd = e.getActionCommand();
		
		if (SEND.equals(cmd)) {
			message.setText(" ");
			String report = reportBox.getText().trim();
			if (report.length() < 1) {
				message.setText("Report cannot be empty.");
				reportBox.setText("");
			}
			else {
				DataProcessor.insertReport(loginScr.getUsername(), report);
				message.setText("Successfully reported.");
				reportBox.setText("");
				reports.add(DataProcessor.getNewestReport());
				DefaultTableModel model = (DefaultTableModel)table.getModel();
				Object[] row = new Object[2];
				row[0] = loginScr.getUsername();
				row[1] = report;
				model.addRow(row);
			}
		}
		else if (DELETE.equals(cmd)) {
			while (table.getSelectedRow() != -1) {
				int index = table.getSelectedRow();
				DefaultTableModel model = (DefaultTableModel)table.getModel();
				model.removeRow(index);
				DataProcessor.removeReport(reports.get(index).getId());
				reports.remove(index);
			}
		}
		else { //Return
			message.setText(" ");
			reportBox.setText("");
			this.setVisible(false);
			previousScr.setVisible(true);
		}
	}

	/**
	 * @param loginScr the loginScr to set
	 */
	public void setLoginScr(LoginScreen loginScr) {
		this.loginScr = loginScr;
	}
	
	/**
	 * This method activates the Report Screen and 
	 * stores the previous screen 
	 * @param preScr
	 */
	public void appearFrom(JFrame preScr) {
		if (DataProcessor.getRole(loginScr.getUsername()).equals("Student")) {
			reportPanel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 0));
			panel.add(reportPanel, BorderLayout.CENTER);
		}
		else {
			reportPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
			tabbedPane.addTab("Report", reportPanel);
			tabbedPane.addTab("Manage", managePanel);
			panel.add(tabbedPane, BorderLayout.CENTER);
		}
		this.setVisible(true);
		this.previousScr = preScr;
	}
	
	private void displayReports() {
		reports = DataProcessor.getReports();
		DefaultTableModel model = (DefaultTableModel)table.getModel();
		model.setRowCount(0);
		Object[] row = new Object[2];
		for(Report report : reports) {
			row[0] = report.getUsername();
			row[1] = report.getReport();
			model.addRow(row);
		}
	}
	
}
