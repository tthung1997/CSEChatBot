import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 * This class implements the Update Screen frame with all components.
 * @author Group 11 CSCE 361
 * @date Fall 2017
 */
public class UpdateScreen extends JFrame implements ActionListener {

	//Action commands
	private static final String CHAT 	= "chat";
	private static final String REPORT 	= "report";
	private static final String UPDATE 	= "update";
	private static final String UPDATEM = "updateM";
	private static final String INSERT 	= "insert";
	private static final String DELETE 	= "delete";
	
	//Instances of other screens
	private ReportScreen 		reportScr;
	private ChatScreen 			chatScr;
	
	//Java GUI components
	private JTextArea 			questionBox;
	private JTextArea 			answerBox;
	private JLabel 				message;
	private JTabbedPane			tabbedPane;
	private JTable				table;	
	
	/**
	 * This constructor creates Update Screen Frame
	 * @throws IOException 
	 */
	public UpdateScreen() throws IOException {
		
		//Set frame
		setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
		setTitle("CSE CHATBOT - UPDATE");
		setResizable(false);
		Container contentPane = getContentPane();
		
		//Create panel
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		panel.setPreferredSize (new Dimension(600, 400));
		panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

		//CSE image
		BufferedImage csePicture = ImageIO.read(getClass().getResource("CSE_logo.png"));
		JLabel picLabel = new JLabel(new ImageIcon(csePicture));
		picLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
		panel.add(picLabel, BorderLayout.WEST);
		
		//Tabbed pane
		tabbedPane = new JTabbedPane();
		tabbedPane.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 0));
		panel.add(tabbedPane, BorderLayout.CENTER);
		
		//Update panel
		JPanel updatePanel = new JPanel();
		updatePanel.setLayout(new BorderLayout());
		updatePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		tabbedPane.addTab("UPDATE", updatePanel);
		
		//Chat button
		JButton insertButton = new JButton("INSERT");
		insertButton.setPreferredSize(new Dimension(90, 40));
		insertButton.setActionCommand(INSERT);
        insertButton.addActionListener(this);
		
		//Chat button
		JButton chatButton = new JButton("CHAT");
		chatButton.setPreferredSize(new Dimension(90, 40));
		chatButton.setActionCommand(CHAT);
        chatButton.addActionListener(this);
        
        //Update button
        JButton updateButton = new JButton("UPDATE");
        updateButton.setPreferredSize(new Dimension(90, 40));
        updateButton.setActionCommand(UPDATE);
        updateButton.addActionListener(this);
        
        //Report button
		JButton reportButton = new JButton("REPORT");
		reportButton.setPreferredSize(new Dimension(90, 40));
		reportButton.setActionCommand(REPORT);
		reportButton.addActionListener(this);
        
		//Question box label
		JLabel questionLabel = new JLabel("QUESTION", JLabel.TRAILING);
		questionLabel.setLabelFor(questionBox);
		
        //Question box
        questionBox = new JTextArea();
        questionBox.setEditable(true);
        questionBox.setWrapStyleWord(true);
        questionBox.setFont(new Font("Courier", Font.PLAIN, 14));
        questionBox.setLineWrap(true);
        questionBox.setMargin(new Insets(10, 10, 10, 10));
        
	    //Answer box label
	    JLabel answerLabel = new JLabel("ANSWER", JLabel.TRAILING);
		answerLabel.setLabelFor(answerBox);
	    
	    //Answer box
	    answerBox = new JTextArea();
	    answerBox.setEditable(true);
	    answerBox.setWrapStyleWord(true);
	    answerBox.setFont(new Font("Courier", Font.PLAIN, 14));
	    answerBox.setLineWrap(true);
	    answerBox.setMargin(new Insets(10, 10, 10, 10));
        
        //input panel
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new SpringLayout());
        inputPanel.add(questionLabel);
        inputPanel.add(new JScrollPane(questionBox));
        inputPanel.add(answerLabel);
        inputPanel.add(new JScrollPane(answerBox));
        SpringUtilities.makeCompactGrid(inputPanel, 2, 2, 6, 6, 20, 10);
        updatePanel.add(inputPanel, BorderLayout.CENTER);
        
        //Message Label
        message = new JLabel(" ");
        message.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        //Action panel
        JPanel actionPanel = new JPanel();
        actionPanel.setLayout(new BoxLayout(actionPanel, BoxLayout.Y_AXIS));
        actionPanel.add(message);
        updatePanel.add(actionPanel, BorderLayout.SOUTH);
        
        //button panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.add(insertButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(chatButton);
        buttonPanel.add(reportButton);
        buttonPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        actionPanel.add(buttonPanel);
        
        //Manage panel
        JPanel managePanel = new JPanel();
        managePanel.setLayout(new BorderLayout());
		managePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		tabbedPane.addTab("MANAGE", managePanel);
        
		//Display table
		table = new JTable() { 
			public boolean isCellEditable(int row, int column) {                
                return false;               
			}
  			public String getToolTipText(MouseEvent e)
	  	    {
	  	        int row = rowAtPoint(e.getPoint());
	  	        int column = columnAtPoint(e.getPoint());
	  	        if (row < 0 || row >= getRowCount() 
	  	        		|| column < 0 || column >= getColumnCount()) {
	  	        	return null;
	  	        }
	  	        Object value = getValueAt(row, column);
	  	        //cut into multiple lines
	  	        return value == null ? null : 
	  	        	("<html><p width=\"300\">" + value.toString() + "</p></html>");
	  	    }
  		};
  		table.setModel(new DefaultTableModel(
  				new Object[][] {
  				},
  				new String[] {
  					"Username", "Report"
  				}
  			));
  		table.getColumnModel().getColumn(0).setMaxWidth(200);
  		table.getColumnModel().getColumn(0).setPreferredWidth(100);
  		table.getTableHeader().setReorderingAllowed(false);
  		displayQuestions();
  		
  		//JScrollPane
  		JScrollPane scrollPane = new JScrollPane(table);
  		table.setFillsViewportHeight(true);
  		managePanel.add(scrollPane, BorderLayout.CENTER);
		
		//Delete button
  		JButton deleteButton = new JButton("DELETE");
        deleteButton.setPreferredSize(new Dimension(90, 40));
        deleteButton.setActionCommand(DELETE);
        deleteButton.addActionListener(this);
        
        //Update button
  		JButton updateMButton = new JButton("UPDATE");
        updateMButton.setPreferredSize(new Dimension(90, 40));
        updateMButton.setActionCommand(UPDATEM);
        updateMButton.addActionListener(this);
        
        //Return button for manage
        JButton returnMButton = new JButton("CHAT");
        returnMButton.setPreferredSize(new Dimension(90, 40));
        returnMButton.setActionCommand(CHAT);
        returnMButton.addActionListener(this);
        
        //Report button
  		JButton reportMButton = new JButton("REPORT");
  		reportMButton.setPreferredSize(new Dimension(90, 40));
  		reportMButton.setActionCommand(REPORT);
  		reportMButton.addActionListener(this);
  		
  		//button panel for managing
        JPanel buttonMPanel = new JPanel();
        buttonMPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonMPanel.add(updateMButton);
        buttonMPanel.add(deleteButton);
        buttonMPanel.add(returnMButton);
        buttonMPanel.add(reportMButton);
        buttonMPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        managePanel.add(buttonMPanel, BorderLayout.SOUTH);
		
		contentPane.add(panel);
		pack();
		setLocationRelativeTo(null);
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		String cmd = e.getActionCommand();
		
		if (INSERT.equals(cmd)) {
			message.setText(" ");
			String question = questionBox.getText().trim();
			String answer = answerBox.getText().trim();
			if (question.length() < 1) {
				message.setText("Question cannot be empty.");
				questionBox.setText("");
			}
			else if (answer.length() < 1) {
				message.setText("Answer cannot be empty.");
				answerBox.setText("");
			}
			else {
				DataProcessor.insertQA(question, answer);
				chatScr.getQuestionList();
				message.setText("Successfully updated.");
				questionBox.setText("");
				answerBox.setText("");
			}
		}
		else if (UPDATE.equals(cmd)) {
			
		}
		else if (UPDATEM.equals(cmd)) {
			tabbedPane.setSelectedIndex(0);
		}
		else if (CHAT.equals(cmd)) {
			message.setText(" ");
			questionBox.setText("");
			answerBox.setText("");
			this.setVisible(false);
			chatScr.setVisible(true);
		}
		else {//Report
			message.setText(" ");
			questionBox.setText("");
			answerBox.setText("");
			this.setVisible(false);
			reportScr.appearFrom(this);
		}
	}

	/**
	 * @param reportScr the reportScr to set
	 */
	public void setReportScr(ReportScreen reportScr) {
		this.reportScr = reportScr;
	}

	/**
	 * @param chatScr the chatScr to set
	 */
	public void setChatScr(ChatScreen chatScr) {
		this.chatScr = chatScr;
	}
	

	/**
	 * This method retrieves all reports to display on the table
	 */
	private void displayQuestions() {
		ArrayList<String> questions = chatScr.getQuestionList();
		DefaultTableModel model = (DefaultTableModel)table.getModel();
		model.setRowCount(0);
		Object[] row = new Object[2];
		for(Report report : reports) {
			row[0] = report.getUsername();
			row[1] = report.getReport();
			model.addRow(row);
		}
	}
	
}
